# Generated by Django 5.2.3 on 2025-06-17 20:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('N', 'Prefer not to say')], max_length=1)),
                ('height', models.PositiveIntegerField(blank=True, help_text='Height in cm', null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=5, null=True)),
                ('fitness_level', models.CharField(choices=[('beginner', 'Beginner (0-6 months)'), ('intermediate', 'Intermediate (6 months - 2 years)'), ('advanced', 'Advanced (2+ years)'), ('expert', 'Expert (5+ years)')], default='beginner', max_length=20)),
                ('activity_level', models.CharField(choices=[('sedentary', 'Sedentary (little to no exercise)'), ('lightly_active', 'Lightly active (light exercise 1-3 days/week)'), ('moderately_active', 'Moderately active (moderate exercise 3-5 days/week)'), ('very_active', 'Very active (hard exercise 6-7 days/week)'), ('extremely_active', 'Extremely active (very hard exercise, physical job)')], default='sedentary', max_length=20)),
                ('preferred_workout_duration', models.PositiveIntegerField(default=30, help_text='Preferred workout duration in minutes')),
                ('available_equipment', models.TextField(blank=True, help_text='Available equipment (comma-separated)')),
                ('fitness_goals', models.TextField(blank=True, help_text='Fitness goals (JSON format)')),
                ('dietary_restrictions', models.TextField(blank=True, help_text='Dietary restrictions and preferences')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_workout_date', models.DateTimeField(blank=True, null=True)),
                ('workout_streak', models.PositiveIntegerField(default=0)),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], default='private', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MedicalData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medical_conditions', models.TextField(blank=True, help_text='Encrypted medical conditions')),
                ('medications', models.TextField(blank=True, help_text='Encrypted medications')),
                ('allergies', models.TextField(blank=True, help_text='Encrypted allergies')),
                ('emergency_contact', models.TextField(blank=True, help_text='Encrypted emergency contact')),
                ('resting_heart_rate', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(40), django.core.validators.MaxValueValidator(120)])),
                ('blood_pressure_systolic', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(80), django.core.validators.MaxValueValidator(200)])),
                ('blood_pressure_diastolic', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(120)])),
                ('sleep_hours', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
                ('stress_level', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('energy_level', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'medical_data',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar_url', models.URLField(blank=True)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('workout_reminders', models.BooleanField(default=True)),
                ('is_coach', models.BooleanField(default=False)),
                ('coach_certification', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='WorkoutGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goal_type', models.CharField(choices=[('weight_loss', 'Weight Loss'), ('muscle_gain', 'Muscle Gain'), ('endurance', 'Endurance'), ('strength', 'Strength'), ('flexibility', 'Flexibility'), ('general_fitness', 'General Fitness'), ('rehabilitation', 'Rehabilitation'), ('sports_specific', 'Sports Specific')], max_length=20)),
                ('target_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('target_unit', models.CharField(blank=True, max_length=20)),
                ('target_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workout_goals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'workout_goals',
            },
        ),
    ]
